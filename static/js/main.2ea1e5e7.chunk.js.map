{"version":3,"sources":["Components/QuizQuestions.js","Components/QuizzBody.js","App.js","reportWebVitals.js","index.js"],"names":["QuizQuestions","props","RandomRight","Math","random","ChangeInputs","ActualProps","console","log","this","Append","document","getElementById","ActualPosition","innerHTML","newInputRight","createElement","setAttribute","state","RandomNumberForRight","newCheckMark","newLabelRight","LabelInfo","innerText","RightAnswer","appendChild","getAttribute","setTimeout","classList","add","append","Object","values","forEach","element","index","newInput","IndexPlusTimeOut","newLabel","WrongAnswers","nextProps","setState","prevProps","id","Question","Component","BodyLength","QuizzBody","length","Validation","i","Answered","GetQuestion","Index","ActualPositionNumber","QuestionPosition","GetRightAnswer","GetWrongAnswers","TotalQuestions","QuizBody","handleFormChild","value","onSelect","NextQuestion","prevState","RightCounter","onTrigger","bind","Position","className","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2ea1e5e7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\n\r\n\r\n\r\nclass QuizQuestions extends Component{\r\n\r\n    constructor(props){\r\n\r\n     const RandomRight = Math.random();\r\n\r\n        \r\n        super(props);\r\n\r\n        this.state = {\r\n            RightAnswer: this.props.RightAnswer,\r\n           WrongAnswers:  this.props.WrongAnswers,\r\n           RandomNumberForRight: RandomRight,\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    ChangeInputs = function(ActualProps){\r\n\r\n        console.log(this.props, \"props\");\r\n\r\n        let Append = document.getElementById(\"Answers\");\r\n\r\n        //Empty the div if the user already clicks on Next Question\r\n\r\n        if(this.props.ActualPosition > 1){\r\n\r\n           document.getElementById(\"Answers\").innerHTML = \"\";\r\n\r\n           //Custom radio. First create all elements except label which is the container \r\n            let newInputRight = document.createElement(\"input\");\r\n            newInputRight.setAttribute(\"type\", \"radio\");\r\n            newInputRight.setAttribute(\"name\", \"Answer\");\r\n            newInputRight.setAttribute(\"value\", this.state.RandomNumberForRight);\r\n\r\n            let newCheckMark = document.createElement(\"span\");\r\n            newCheckMark.setAttribute(\"class\", \"checkmark\");\r\n            let newLabelRight = document.createElement(\"label\");\r\n            \r\n           \r\n            let LabelInfo = document.createElement(\"P\");\r\n            LabelInfo.innerText = this.props.RightAnswer;\r\n            //Append all as child for the label \r\n            newLabelRight.appendChild(newInputRight);\r\n            newLabelRight.appendChild(newCheckMark);\r\n            newLabelRight.appendChild(LabelInfo);\r\n\r\n            //Append all to the DOM\r\n            newLabelRight.setAttribute(\"htmlFor\", newInputRight.getAttribute(\"name\"));\r\n            newLabelRight.setAttribute(\"class\", \"radio-container\");\r\n            setTimeout(() => {\r\n                newLabelRight.classList.add(\"radio-container-showed\"); \r\n            }, 1000);\r\n            document.getElementById(\"Answers\").append(newLabelRight);\r\n\r\n            //Bring the others one (which are all wrongs answers)\r\n\r\n            //TO DO: reorder the inputs on every rerender \r\n\r\n            Object.values(ActualProps).forEach(function(element, index){ \r\n                let newInput = document.createElement(\"input\");\r\n                newInput.setAttribute(\"type\", \"radio\");\r\n                newInput.setAttribute(\"name\", \"Answer\");\r\n                newInput.setAttribute(\"value\", Math.random());\r\n\r\n                let IndexPlusTimeOut = index*50;\r\n\r\n                let newCheckMark = document.createElement(\"span\");\r\n                newCheckMark.setAttribute(\"class\", \"checkmark\");\r\n\r\n                let newLabel = document.createElement(\"label\");\r\n                let LabelInfo = document.createElement(\"P\");\r\n                LabelInfo.innerText = element;\r\n                //Append all as child for the label \r\n                newLabel.appendChild(newInput);\r\n                newLabel.appendChild(newCheckMark);\r\n                newLabel.appendChild(LabelInfo);\r\n\r\n                newLabel.setAttribute(\"htmlFor\", newInput.getAttribute(\"name\"));\r\n                newLabel.setAttribute(\"class\", \"radio-container\");\r\n                setTimeout(() => {\r\n                    newLabel.classList.add(\"radio-container-showed\"); \r\n                }, 1000+IndexPlusTimeOut);\r\n\r\n               Append.append(newLabel);\r\n            })\r\n        }else{\r\n        \r\n            //Custom radio. First create all elements except label which is the container \r\n            let newInputRight = document.createElement(\"input\");\r\n            newInputRight.setAttribute(\"type\", \"radio\");\r\n            newInputRight.setAttribute(\"name\", \"Answer\");\r\n            newInputRight.setAttribute(\"value\", this.state.RandomNumberForRight);\r\n\r\n            let newCheckMark = document.createElement(\"span\");\r\n            newCheckMark.setAttribute(\"class\", \"checkmark\");\r\n            let newLabelRight = document.createElement(\"label\");\r\n\r\n            let LabelInfo = document.createElement(\"P\");\r\n            LabelInfo.innerText = this.props.RightAnswer;\r\n            //Append all as child for the label \r\n            newLabelRight.appendChild(newInputRight);\r\n            newLabelRight.appendChild(newCheckMark);\r\n            newLabelRight.appendChild(LabelInfo);\r\n\r\n            //Append all to the DOM\r\n            newLabelRight.setAttribute(\"htmlFor\", newInputRight.getAttribute(\"name\"));\r\n            newLabelRight.setAttribute(\"class\", \"radio-container\");\r\n            setTimeout(() => {\r\n                newLabelRight.classList.add(\"radio-container-showed\"); \r\n            }, 1000);\r\n            document.getElementById(\"Answers\").append(newLabelRight);\r\n        \r\n    \r\n            Object.values(ActualProps).forEach(function(element, index){ \r\n                let newInput = document.createElement(\"input\");\r\n                newInput.setAttribute(\"type\", \"radio\");\r\n                newInput.setAttribute(\"name\", \"Answer\");\r\n                newInput.setAttribute(\"value\", Math.random());\r\n\r\n                let IndexPlusTimeOut = index*50;\r\n\r\n                let newCheckMark = document.createElement(\"span\");\r\n                newCheckMark.setAttribute(\"class\", \"checkmark\");\r\n\r\n                let newLabel = document.createElement(\"label\");\r\n\r\n                let LabelInfo = document.createElement(\"P\");\r\n                LabelInfo.innerText = element;\r\n                //Append all as child for the label \r\n                newLabel.appendChild(newInput);\r\n                newLabel.appendChild(newCheckMark);\r\n                newLabel.appendChild(LabelInfo);\r\n\r\n                newLabel.setAttribute(\"htmlFor\", newInput.getAttribute(\"name\"));\r\n                newLabel.setAttribute(\"class\", \"radio-container\");\r\n                setTimeout(() => {\r\n                    newLabel.classList.add(\"radio-container-showed\"); \r\n                }, 1000+IndexPlusTimeOut);\r\n              \r\n               Append.append(newLabel);\r\n            })\r\n        }    \r\n    }\r\n\r\n\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps){\r\n\r\n        this.setState({RightAnswer: nextProps.RightAnswer})\r\n        this.setState({WrongAnswers: nextProps.WrongAnswers})\r\n\r\n      \r\n        \r\n\r\n    }\r\n \r\n\r\n    componentDidMount(){    \r\n      \r\n       // this.ChangeInputs(this.state.WrongAnswers[0], false);\r\n   \r\n    }\r\n\r\n\r\n\r\n  \r\n \r\ncomponentDidUpdate(prevProps) {\r\n\r\n        this.ChangeInputs(this.state.WrongAnswers[0]);\r\n\r\n}\r\n\r\ncomponentWillUpdate(){\r\n\r\n}        \r\n\r\n\r\n    render(){\r\n\r\n        return(\r\n\r\n    \r\n\r\n        <div id=\"QuizQuestion\">\r\n            <h2>Question number {this.props.ActualPosition}</h2>\r\n\r\n            <p>{this.props.Question}</p>\r\n\r\n            <form id=\"Answers\">\r\n\r\n            </form>     \r\n           \r\n         </div>\r\n            \r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default QuizQuestions;","import React, {Component} from 'react';\r\nimport QuizQuestions from './QuizQuestions.js';\r\nimport {QuizzBody} from \"../data/quiz.json\";\r\n\r\n\r\nconst ActualPosition = function(){\r\n\r\n    let BodyLength = QuizzBody.length;\r\n    let Validation = 0;\r\n\r\n    for(let i = 0; i < BodyLength; i++){\r\n        if(QuizzBody[i].Answered == false){\r\n            Validation = i+1;          \r\n            break;\r\n        }   \r\n    }\r\n    return Validation; \r\n}\r\n\r\n\r\n\r\nconst GetQuestion = function(Index){\r\n    if(!Index){\r\n    var ActualPositionNumber = ActualPosition();\r\n    }else{\r\n    var ActualPositionNumber = Index;\r\n    }\r\n    let QuestionPosition = 0;\r\n    QuestionPosition = ActualPositionNumber - 1;\r\n    let Question = QuizzBody[QuestionPosition].Question;\r\n    return Question;\r\n}\r\n\r\n\r\n\r\nconst GetRightAnswer = function(Index){\r\n    if(!Index){\r\n    var ActualPositionNumber = ActualPosition();\r\n    }else{\r\n    var ActualPositionNumber = Index;\r\n    }\r\n    let QuestionPosition = 0;\r\n    QuestionPosition = ActualPositionNumber - 1;\r\n    let Answers = QuizzBody[QuestionPosition].RightAnswer;\r\n    return Answers;\r\n}\r\n\r\n\r\nconst GetWrongAnswers = function(Index){\r\n    if(!Index){\r\n        var ActualPositionNumber = ActualPosition();\r\n    }else{\r\n        var ActualPositionNumber = Index;\r\n     }\r\n    let QuestionPosition = 0;\r\n    QuestionPosition = ActualPositionNumber - 1;\r\n    let Answers = QuizzBody[QuestionPosition].WrongAnswers;\r\n    return Answers;\r\n}\r\n\r\n\r\nconst TotalQuestions = QuizzBody.length;\r\n\r\n\r\nclass QuizBody extends Component{\r\n\r\n    constructor(props){\r\n\r\n        super(props);\r\n\r\n        this.ActualPosition = ActualPosition();\r\n        this.state = {\r\n        Question: GetQuestion(),\r\n        RightAnswer: GetRightAnswer(),\r\n        WrongAnswers: GetWrongAnswers(),\r\n        //NextQuestion:this.NextQuestion.bind(this);\r\n        RightCounter: 0,\r\n        onTrigger: this.handleFormChild.bind(this)\r\n\r\n    }\r\n}\r\n\r\n    \r\n    componentDidMount(){\r\n\r\n    if(!this.state.ActualPosition){    \r\n    this.setState({ActualPosition: 1})\r\n    this.setState({Question: GetQuestion(0)});\r\n    this.setState({RightAnswer: GetRightAnswer(0)});\r\n    this.setState({WrongAnswers: GetWrongAnswers(0)});\r\n    }\r\n\r\n}\r\n\r\nhandleFormChild = () =>{\r\n\r\n    var value = this.value;\r\n    this.props.onSelect(value); \r\n\r\n}\r\n\r\n    NextQuestion = () => {\r\n    if(this.state.ActualPosition < TotalQuestions){\r\n     this.setState(\r\n        (prevState,props)=>{\r\n            return {ActualPosition:prevState.ActualPosition+1};\r\n         }\r\n     );\r\n     this.setState({Question: GetQuestion(this.state.ActualPosition+1)});\r\n     this.setState({RightAnswer: GetRightAnswer(this.state.ActualPosition+1)});\r\n     this.setState({WrongAnswers: GetWrongAnswers(this.state.ActualPosition+1)});\r\n    }\r\n\r\n    }\r\n  \r\n  \r\n  \r\n\r\n\r\n    render(){\r\n\r\n        const Position = this.state.ActualPosition;\r\n        const Question = this.state.Question;\r\n        const WrongAnswers = this.state.WrongAnswers;\r\n        const RightAnswer = this.state.RightAnswer;\r\n\r\n\r\n        return(\r\n\r\n            <div id=\"BodyQuiz\">\r\n                <div id=\"OpacityLayout\"></div>\r\n\r\n                <div id=\"ContentLayout\">\r\n                    <h2 id=\"title\">HOW MUCH DO YOU KNOW ABOUT BATMAN UNIVERSE?</h2>\r\n                   <div className=\"ContentPrevious\">\r\n                        <h4>TAKE THE QUIZ!</h4>\r\n                    </div>\r\n                    <QuizQuestions ActualPosition={Position} Question={Question} WrongAnswers={WrongAnswers} RightAnswer={RightAnswer} onTrigger={this.state.onTrigger}></QuizQuestions>\r\n\r\n                    <button id=\"NextCuestion\" onClick={this.NextQuestion}> Next Question</button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default QuizBody;","import React, {Component} from 'react';\r\nimport QuizBody from './Components/QuizzBody';\r\n\r\nclass App extends Component{\r\n\r\n  render(){\r\n    return (\r\n      \r\n      <QuizBody></QuizBody>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './styles.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}