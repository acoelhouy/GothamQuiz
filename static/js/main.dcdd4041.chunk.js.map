{"version":3,"sources":["Components/QuizQuestions.js","Components/QuizzBody.js","App.js","reportWebVitals.js","index.js"],"names":["QuizQuestions","props","RandomRight","Math","random","state","RightAnswer","WrongAnswers","RandomNumberForRight","nextProps","this","setState","Append","document","getElementById","Object","values","forEach","element","index","NameInput","newInput","createElement","setAttribute","newLabel","innerHTML","append","prevProps","console","log","id","ActualPosition","Question","name","type","value","htmlFor","Component","BodyLength","QuizzBody","length","Validation","i","Answered","GetQuestion","Index","ActualPositionNumber","QuestionPosition","GetRightAnswer","GetWrongAnswers","TotalQuestions","QuizBody","handleFormChild","onSelect","NextQuestion","prevState","RightCounter","onTrigger","bind","Position","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dcdd4041.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\n\r\n\r\n\r\nclass QuizQuestions extends Component{\r\n\r\n    constructor(props){\r\n\r\n     const RandomRight = Math.random();\r\n\r\n        \r\n        super(props);\r\n\r\n        this.state = {\r\n            RightAnswer: this.props.RightAnswer,\r\n           WrongAnswers:  this.props.WrongAnswers,\r\n           RandomNumberForRight: RandomRight,\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps){\r\n\r\n        this.setState({RightAnswer: nextProps.RightAnswer})\r\n        this.setState({WrongAnswers: nextProps.WrongAnswers})\r\n        \r\n\r\n    }\r\n \r\n\r\n    componentDidMount(){    \r\n        let Append = document.getElementById(\"Answers\");\r\n        Object.values(this.state.WrongAnswers[0]).forEach(function(element, index){ \r\n            let NameInput = 'Answer';\r\n            let newInput = document.createElement(\"input\");\r\n            newInput.setAttribute(\"type\", \"radio\");\r\n            newInput.setAttribute(\"name\", NameInput);\r\n            newInput.setAttribute(\"value\", Math.random());\r\n            let newLabel = document.createElement(\"label\");\r\n            newLabel.setAttribute(\"htmlFor\", NameInput);\r\n            newLabel.innerHTML = element;\r\n           Append.append(newInput, newLabel);\r\n\r\n           \r\n            \r\n        })\r\n\r\n   \r\n    }\r\n\r\n\r\n\r\n  \r\n \r\ncomponentDidUpdate(prevProps) {\r\n\r\nconsole.log(this.state, \"nuevoestado\");\r\n\r\n}\r\n\r\ncomponentWillUpdate(){\r\n\r\n}        \r\n\r\n\r\n    render(){\r\n\r\n        return(\r\n\r\n    \r\n\r\n        <div id=\"QuizQuestion\">\r\n            <h2>Question number {this.props.ActualPosition}</h2>\r\n\r\n            <p>{this.props.Question}</p>\r\n\r\n            <form id=\"Answers\">\r\n                <input  name=\"Answer\" type=\"radio\" value={this.state.RandomNumberForRight}></input>\r\n                <label htmlFor=\"Answer\">{this.state.RightAnswer}</label>\r\n            </form>     \r\n           \r\n         </div>\r\n            \r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default QuizQuestions;","import React, {Component} from 'react';\r\nimport QuizQuestions from './QuizQuestions.js';\r\nimport {QuizzBody} from \"../data/quiz.json\";\r\n\r\n\r\nconst ActualPosition = function(){\r\n\r\n    let BodyLength = QuizzBody.length;\r\n    let Validation = 0;\r\n\r\n    for(let i = 0; i < BodyLength; i++){\r\n        if(QuizzBody[i].Answered == false){\r\n            Validation = i+1;          \r\n            break;\r\n        }   \r\n    }\r\n    return Validation; \r\n}\r\n\r\n\r\n\r\nconst GetQuestion = function(Index){\r\n    if(!Index){\r\n    var ActualPositionNumber = ActualPosition();\r\n    }else{\r\n    var ActualPositionNumber = Index;\r\n    }\r\n    let QuestionPosition = 0;\r\n    QuestionPosition = ActualPositionNumber - 1;\r\n    let Question = QuizzBody[QuestionPosition].Question;\r\n    return Question;\r\n}\r\n\r\n\r\n\r\nconst GetRightAnswer = function(Index){\r\n    if(!Index){\r\n    var ActualPositionNumber = ActualPosition();\r\n    }else{\r\n    var ActualPositionNumber = Index;\r\n    }\r\n    let QuestionPosition = 0;\r\n    QuestionPosition = ActualPositionNumber - 1;\r\n    let Answers = QuizzBody[QuestionPosition].RightAnswer;\r\n    return Answers;\r\n}\r\n\r\n\r\nconst GetWrongAnswers = function(Index){\r\n    if(!Index){\r\n        var ActualPositionNumber = ActualPosition();\r\n    }else{\r\n        var ActualPositionNumber = Index;\r\n     }\r\n    let QuestionPosition = 0;\r\n    QuestionPosition = ActualPositionNumber - 1;\r\n    let Answers = QuizzBody[QuestionPosition].WrongAnswers;\r\n    return Answers;\r\n}\r\n\r\n\r\nconst TotalQuestions = QuizzBody.length;\r\n\r\n\r\nclass QuizBody extends Component{\r\n\r\n    constructor(props){\r\n\r\n        super(props);\r\n\r\n        this.ActualPosition = ActualPosition();\r\n        this.state = {\r\n        Question: GetQuestion(),\r\n        RightAnswer: GetRightAnswer(),\r\n        WrongAnswers: GetWrongAnswers(),\r\n        //NextQuestion:this.NextQuestion.bind(this);\r\n        RightCounter: 0,\r\n        onTrigger: this.handleFormChild.bind(this)\r\n\r\n    }\r\n}\r\n\r\n    \r\n    componentDidMount(){\r\n\r\n    if(!this.state.ActualPosition){    \r\n    this.setState({ActualPosition: 1})\r\n    this.setState({Question: GetQuestion(0)});\r\n    this.setState({RightAnswer: GetRightAnswer(0)});\r\n    this.setState({WrongAnswers: GetWrongAnswers(0)});\r\n    }\r\n\r\n}\r\n\r\nhandleFormChild = () =>{\r\n\r\n    var value = this.value;\r\n    this.props.onSelect(value); \r\n\r\n}\r\n\r\n    NextQuestion = () => {\r\n    if(this.state.ActualPosition < TotalQuestions){\r\n     this.setState(\r\n        (prevState,props)=>{\r\n            return {ActualPosition:prevState.ActualPosition+1};\r\n         }\r\n     );\r\n     this.setState({Question: GetQuestion(this.state.ActualPosition+1)});\r\n     this.setState({RightAnswer: GetRightAnswer(this.state.ActualPosition+1)});\r\n     this.setState({WrongAnswers: GetWrongAnswers(this.state.ActualPosition+1)});\r\n    }\r\n\r\n    }\r\n  \r\n  \r\n  \r\n\r\n\r\n    render(){\r\n\r\n        const Position = this.state.ActualPosition;\r\n        const Question = this.state.Question;\r\n        const WrongAnswers = this.state.WrongAnswers;\r\n        const RightAnswer = this.state.RightAnswer;\r\n\r\n\r\n        return(\r\n\r\n            <div id=\"BodyQuiz\">\r\n                <div id=\"OpacityLayout\"></div>\r\n\r\n                <div id=\"ContentLayout\">\r\n                    <h2 id=\"title\">HOW MUCH DO YOU KNOW ABOUT BATMAN UNIVERSE?</h2>\r\n                    <h4>TAKE THE QUIZ!</h4>\r\n\r\n                    <p>It has {TotalQuestions} questions!</p>\r\n\r\n                    <QuizQuestions ActualPosition={Position} Question={Question} WrongAnswers={WrongAnswers} RightAnswer={RightAnswer} onTrigger={this.state.onTrigger}></QuizQuestions>\r\n\r\n                    <button id=\"NextCuestion\" onClick={this.NextQuestion}> Next Question</button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default QuizBody;","import React, {Component} from 'react';\nimport QuizBody from './Components/QuizzBody';\n\nclass App extends Component{\n\n  render(){\n    return (\n      \n      <QuizBody></QuizBody>\n\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}